;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name stream-of-redditness-cljs.state, :imports nil, :requires {set clojure.set, clojure.set clojure.set, clojure.string clojure.string, string clojure.string}, :uses nil, :defs {readStorage {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 114, :column 7, :line 114, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/readStorage, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, zipWriteStorage {:protocol-inline nil, :meta {:arglists (quote ([zip hashmap])), :end-column 22, :end-line 124, :column 7, :line 124, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/zipWriteStorage, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 22, :method-params ([zip hashmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zip hashmap])), :test true}, storageString {:meta {:end-column 19, :end-line 113, :column 6, :line 113, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :file "src/stream_of_redditness_cljs/state.cljs", :line 113, :column 1, :end-line 113, :end-column 19, :test true, :name stream-of-redditness-cljs.state/storageString}, map-diff {:protocol-inline nil, :meta {:arglists (quote ([m1 m2])), :doc "Obtain the minimal changes from map1 to map2.\n  The following two expressions are always equal\n      (deep-merge m1 (map-diff m1 m2))\n      (deep-merge m1 m2)", :end-column 15, :end-line 52, :column 7, :line 52, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/map-diff, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 15, :method-params ([m1 m2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m1 m2])), :doc "Obtain the minimal changes from map1 to map2.\n  The following two expressions are always equal\n      (deep-merge m1 (map-diff m1 m2))\n      (deep-merge m1 m2)", :test true}, deep-map {:protocol-inline nil, :meta {:arglists (quote ([m f])), :end-column 15, :end-line 25, :column 7, :line 25, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/deep-map, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 15, :method-params ([m f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m f])), :test true}, get-in! {:protocol-inline nil, :meta {:arglists (quote ([a z])), :end-column 14, :end-line 101, :column 7, :line 101, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/get-in!, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 14, :method-params ([a z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a z])), :test true}, writeStorage {:protocol-inline nil, :meta {:arglists (quote ([hashmap])), :end-column 19, :end-line 119, :column 7, :line 119, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/writeStorage, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 19, :method-params ([hashmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hashmap])), :test true}, deep-merge-in! {:protocol-inline nil, :meta {:arglists (quote ([a z v])), :end-column 21, :end-line 95, :column 7, :line 95, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/deep-merge-in!, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 21, :method-params ([a z v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a z v])), :test true}, localStorage {:meta {:end-column 18, :end-line 112, :column 6, :line 112, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :file "src/stream_of_redditness_cljs/state.cljs", :line 112, :column 1, :end-line 112, :end-column 18, :test true, :name stream-of-redditness-cljs.state/localStorage}, deep-keys-to-keywords {:protocol-inline nil, :meta {:arglists (quote ([m])), :end-column 28, :end-line 42, :column 7, :line 42, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/deep-keys-to-keywords, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 28, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, deep-merge {:protocol-inline nil, :meta {:arglists (quote ([m1 m2])), :end-column 17, :end-line 45, :column 7, :line 45, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/deep-merge, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 17, :method-params ([m1 m2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m1 m2])), :test true}, parseObjForce {:protocol-inline nil, :meta {:arglists (quote ([jsonString])), :end-column 20, :end-line 104, :column 7, :line 104, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/parseObjForce, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 20, :method-params ([jsonString]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([jsonString])), :test true}, map-size-bytes {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Obtain the size in bytes of the JSON\n  representation of the map.", :end-column 21, :end-line 68, :column 7, :line 68, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/map-size-bytes, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Obtain the size in bytes of the JSON\n  representation of the map.", :test true}, write-in! {:protocol-inline nil, :meta {:arglists (quote ([a z v])), :end-column 16, :end-line 98, :column 7, :line 98, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/write-in!, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 16, :method-params ([a z v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a z v])), :test true}, deep-remove-keys {:protocol-inline nil, :meta {:arglists (quote ([m ks])), :end-column 23, :end-line 43, :column 7, :line 43, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/deep-remove-keys, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 23, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks])), :test true}, deep-filter {:protocol-inline nil, :meta {:arglists (quote ([m f])), :end-column 18, :end-line 33, :column 7, :line 33, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/deep-filter, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 18, :method-params ([m f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m f])), :test true}, zipReadStorage {:protocol-inline nil, :meta {:arglists (quote ([zip])), :end-column 21, :end-line 117, :column 7, :line 117, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/zipReadStorage, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 21, :method-params ([zip]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zip])), :test true}, app-state {:meta {:end-column 19, :end-line 5, :column 10, :line 5, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :file "src/stream_of_redditness_cljs/state.cljs", :line 5, :column 1, :end-line 5, :end-column 19, :test true, :name stream-of-redditness-cljs.state/app-state}, chunkify-map {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m s] [m s msi cmi kli]), :arglists ([m s] [m s msi cmi kli]), :arglists-meta (nil nil)}, :arglists (quote ([m s] [m s msi cmi kli])), :doc "Segments a map into chunks where each\n  chunk's json representation's size is less\n  than the size provided.\n  The following two expressions are always equal\n      m\n      (reduce deep-merge (chunkify-map m s)", :end-column 19, :end-line 74, :column 7, :line 74, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/state.cljs"}, :name stream-of-redditness-cljs.state/chunkify-map, :variadic false, :file "src/stream_of_redditness_cljs/state.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m s] [m s msi cmi kli]), :arglists ([m s] [m s msi cmi kli]), :arglists-meta (nil nil)}, :method-params ([m s] [m s msi cmi kli]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 5, :fn-var true, :arglists ([m s] [m s msi cmi kli]), :doc "Segments a map into chunks where each\n  chunk's json representation's size is less\n  than the size provided.\n  The following two expressions are always equal\n      m\n      (reduce deep-merge (chunkify-map m s)", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:subredditInput :popups :opentokSessions :popularSubredditThreads :popularThreads :featured :tripwire :oauthReq :reddit :popupShower :activePopup :lastClickNotInPopup :awaitingReqUrl :reqUrl :intervalId :requestSent :activeThreads :requestQueue :else], :seen #{:requestSent :awaitingReqUrl :subredditInput :activePopup :popups :else :opentokSessions :popularSubredditThreads :popularThreads :featured :popupShower :lastClickNotInPopup :reqUrl :requestQueue :intervalId :tripwire :oauthReq :activeThreads :reddit}}, :doc nil}