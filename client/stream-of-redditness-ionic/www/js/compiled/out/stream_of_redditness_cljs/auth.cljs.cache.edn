;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name stream-of-redditness-cljs.auth, :imports nil, :requires {popup stream-of-redditness-cljs.popup, stream-of-redditness-cljs.popup stream-of-redditness-cljs.popup, util stream-of-redditness-cljs.util, stream-of-redditness-cljs.util stream-of-redditness-cljs.util, stream-of-redditness-cljs.globals stream-of-redditness-cljs.globals, globals stream-of-redditness-cljs.globals}, :uses nil, :defs {readStorage {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 21, :column 7, :line 21, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/readStorage, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, zipWriteStorage {:protocol-inline nil, :meta {:arglists (quote ([zip hashmap])), :end-column 22, :end-line 31, :column 7, :line 31, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/zipWriteStorage, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 22, :method-params ([zip hashmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([zip hashmap])), :test true}, onAuthNewClick {:protocol-inline nil, :meta {:arglists (quote ([event])), :end-column 21, :end-line 45, :column 7, :line 45, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/onAuthNewClick, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 21, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :test true}, storageString {:meta {:end-column 19, :end-line 20, :column 6, :line 20, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :file "src/stream_of_redditness_cljs/auth.cljs", :line 20, :column 1, :end-line 20, :end-column 19, :test true, :name stream-of-redditness-cljs.auth/storageString}, users {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 12, :end-line 94, :column 7, :line 94, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/users, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, get-in! {:meta {:end-column 13, :end-line 8, :column 6, :line 8, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :file "src/stream_of_redditness_cljs/auth.cljs", :line 8, :column 1, :end-line 8, :end-column 13, :test true, :name stream-of-redditness-cljs.auth/get-in!}, writeStorage {:protocol-inline nil, :meta {:arglists (quote ([hashmap])), :end-column 19, :end-line 26, :column 7, :line 26, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/writeStorage, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 19, :method-params ([hashmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hashmap])), :test true}, deep-merge-in! {:meta {:end-column 20, :end-line 6, :column 6, :line 6, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :file "src/stream_of_redditness_cljs/auth.cljs", :line 6, :column 1, :end-line 6, :end-column 20, :test true, :name stream-of-redditness-cljs.auth/deep-merge-in!}, localStorage {:meta {:end-column 18, :end-line 19, :column 6, :line 19, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :file "src/stream_of_redditness_cljs/auth.cljs", :line 19, :column 1, :end-line 19, :end-column 18, :test true, :name stream-of-redditness-cljs.auth/localStorage}, onAuthSwitchClick {:protocol-inline nil, :meta {:arglists (quote ([event])), :end-column 24, :end-line 70, :column 7, :line 70, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/onAuthSwitchClick, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 24, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :test true}, parseObjForce {:protocol-inline nil, :meta {:arglists (quote ([jsonString])), :end-column 20, :end-line 11, :column 7, :line 11, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/parseObjForce, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 20, :method-params ([jsonString]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([jsonString])), :test true}, write-in! {:meta {:end-column 15, :end-line 7, :column 6, :line 7, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :file "src/stream_of_redditness_cljs/auth.cljs", :line 7, :column 1, :end-line 7, :end-column 15, :test true, :name stream-of-redditness-cljs.auth/write-in!}, active-user {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 18, :end-line 96, :column 7, :line 96, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/active-user, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, active-access-token {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 26, :end-line 99, :column 7, :line 99, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/active-access-token, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, zipReadStorage {:protocol-inline nil, :meta {:arglists (quote ([zip])), :end-column 21, :end-line 24, :column 7, :line 24, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/zipReadStorage, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 21, :method-params ([zip]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([zip])), :test true}, switchActiveUser {:protocol-inline nil, :meta {:arglists (quote ([username])), :end-column 23, :end-line 66, :column 7, :line 66, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/auth.cljs"}, :name stream-of-redditness-cljs.auth/switchActiveUser, :variadic false, :file "src/stream_of_redditness_cljs/auth.cljs", :end-column 23, :method-params ([username]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([username])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else :awaiting-req-url :req-url :users :active-user :request-sent :interval-id :template :title :buttons :text :onTap :access_token], :seen #{:buttons :awaiting-req-url :onTap :else :access_token :active-user :template :title :interval-id :req-url :request-sent :users :text}}, :doc nil}