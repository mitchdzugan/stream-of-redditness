;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name stream-of-redditness-cljs.poll-reddit, :imports nil, :requires {set clojure.set, clojure.set clojure.set, string clojure.string, clojure.string clojure.string, ajax.core ajax.core, util stream-of-redditness-cljs.util, stream-of-redditness-cljs.util stream-of-redditness-cljs.util, stream-of-redditness-cljs.globals stream-of-redditness-cljs.globals, globals stream-of-redditness-cljs.globals}, :uses {POST ajax.core, GET ajax.core}, :defs {new-comments-poller {:protocol-inline nil, :meta {:arglists (quote ([thread-id])), :end-column 26, :end-line 149, :column 7, :line 149, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/poll-reddit.cljs"}, :name stream-of-redditness-cljs.poll-reddit/new-comments-poller, :variadic false, :file "src/stream_of_redditness_cljs/poll-reddit.cljs", :end-column 26, :method-params ([thread-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([thread-id])), :test true}, newCommentsJSONHandler {:protocol-inline nil, :meta {:arglists (quote ([threadId response])), :end-column 29, :end-line 132, :column 7, :line 132, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/poll-reddit.cljs"}, :name stream-of-redditness-cljs.poll-reddit/newCommentsJSONHandler, :variadic false, :file "src/stream_of_redditness_cljs/poll-reddit.cljs", :end-column 29, :method-params ([threadId response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([threadId response])), :test true}, processCommentTree {:protocol-inline nil, :meta {:arglists (quote ([pathTo commentTree])), :end-column 25, :end-line 90, :column 7, :line 90, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/poll-reddit.cljs"}, :name stream-of-redditness-cljs.poll-reddit/processCommentTree, :variadic false, :file "src/stream_of_redditness_cljs/poll-reddit.cljs", :end-column 25, :method-params ([pathTo commentTree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pathTo commentTree])), :test true}, moreCommentsJSONHandler {:protocol-inline nil, :meta {:arglists (quote ([threadIds response])), :end-column 30, :end-line 24, :column 7, :line 24, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/poll-reddit.cljs"}, :name stream-of-redditness-cljs.poll-reddit/moreCommentsJSONHandler, :variadic false, :file "src/stream_of_redditness_cljs/poll-reddit.cljs", :end-column 30, :method-params ([threadIds response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([threadIds response])), :test true}, partition2 {:protocol-inline nil, :meta {:arglists (quote ([f l])), :end-column 17, :end-line 21, :column 7, :line 21, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/poll-reddit.cljs"}, :name stream-of-redditness-cljs.poll-reddit/partition2, :variadic false, :file "src/stream_of_redditness_cljs/poll-reddit.cljs", :end-column 17, :method-params ([f l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f l])), :test true}, redditCommentData {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 24, :end-line 9, :column 7, :line 9, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/poll-reddit.cljs"}, :name stream-of-redditness-cljs.poll-reddit/redditCommentData, :variadic false, :file "src/stream_of_redditness_cljs/poll-reddit.cljs", :end-column 24, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:flair-css :time :likes :author :flair-text :id :score :saved :gilded :body :thread-id :request-fun :type :handler :more :comments :threadId :requestFun :receivedData :subreddit :title], :seen #{:threadId :flair-css :receivedData :comments :time :type :likes :title :author :flair-text :id :score :saved :gilded :more :thread-id :body :handler :subreddit :requestFun :request-fun}}, :doc nil}