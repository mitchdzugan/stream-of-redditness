;; Analyzed by ClojureScript 0.0-3211
{:use-macros nil, :excludes #{}, :name stream-of-redditness-cljs.util, :imports nil, :requires nil, :uses nil, :defs {map-diff {:protocol-inline nil, :meta {:arglists (quote ([m1 m2])), :doc "Obtain the minimal changes from map1 to map2.\n  The following two expressions are always equal\n      (deep-merge m1 (map-diff m1 m2))\n      (deep-merge m1 m2)", :end-column 15, :end-line 30, :column 7, :line 30, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/map-diff, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 15, :method-params ([m1 m2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m1 m2])), :doc "Obtain the minimal changes from map1 to map2.\n  The following two expressions are always equal\n      (deep-merge m1 (map-diff m1 m2))\n      (deep-merge m1 m2)", :test true}, deep-map {:protocol-inline nil, :meta {:arglists (quote ([m f])), :end-column 15, :end-line 3, :column 7, :line 3, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/deep-map, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 15, :method-params ([m f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m f])), :test true}, get-in! {:protocol-inline nil, :meta {:arglists (quote ([a z])), :end-column 14, :end-line 82, :column 7, :line 82, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/get-in!, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 14, :method-params ([a z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a z])), :test true}, deep-merge-in! {:protocol-inline nil, :meta {:arglists (quote ([a z v])), :end-column 21, :end-line 76, :column 7, :line 76, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/deep-merge-in!, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 21, :method-params ([a z v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a z v])), :test true}, deep-keys-to-keywords {:protocol-inline nil, :meta {:arglists (quote ([m])), :end-column 28, :end-line 20, :column 7, :line 20, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/deep-keys-to-keywords, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 28, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, deep-merge {:protocol-inline nil, :meta {:arglists (quote ([m1 m2])), :end-column 17, :end-line 23, :column 7, :line 23, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/deep-merge, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 17, :method-params ([m1 m2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m1 m2])), :test true}, map-size-bytes {:protocol-inline nil, :meta {:arglists (quote ([m])), :doc "Obtain the size in bytes of the JSON\n  representation of the map.", :end-column 21, :end-line 46, :column 7, :line 46, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/map-size-bytes, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 21, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Obtain the size in bytes of the JSON\n  representation of the map.", :test true}, write-in! {:protocol-inline nil, :meta {:arglists (quote ([a z v])), :end-column 16, :end-line 79, :column 7, :line 79, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/write-in!, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 16, :method-params ([a z v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 3, :fn-var true, :arglists (quote ([a z v])), :test true}, deep-remove-keys {:protocol-inline nil, :meta {:arglists (quote ([m ks])), :end-column 23, :end-line 21, :column 7, :line 21, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/deep-remove-keys, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 23, :method-params ([m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m ks])), :test true}, deep-filter {:protocol-inline nil, :meta {:arglists (quote ([m f])), :end-column 18, :end-line 11, :column 7, :line 11, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/deep-filter, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 18, :method-params ([m f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m f])), :test true}, chunkify-map {:protocol-inline nil, :meta {:top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m s] [m s msi cmi kli]), :arglists ([m s] [m s msi cmi kli]), :arglists-meta (nil nil)}, :arglists (quote ([m s] [m s msi cmi kli])), :doc "Segments a map into chunks where each\n  chunk's json representation's size is less\n  than the size provided.\n  The following two expressions are always equal\n      m\n      (reduce deep-merge (chunkify-map m s)", :end-column 19, :end-line 52, :column 7, :line 52, :file "/Users/mitch/Projects/stream-of-redditness/client/src/stream_of_redditness_cljs/util.cljs"}, :name stream-of-redditness-cljs.util/chunkify-map, :variadic false, :file "src/stream_of_redditness_cljs/util.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([m s] [m s msi cmi kli]), :arglists ([m s] [m s msi cmi kli]), :arglists-meta (nil nil)}, :method-params ([m s] [m s msi cmi kli]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 5, :fn-var true, :arglists ([m s] [m s msi cmi kli]), :doc "Segments a map into chunks where each\n  chunk's json representation's size is less\n  than the size provided.\n  The following two expressions are always equal\n      m\n      (reduce deep-merge (chunkify-map m s)", :test true}}, :require-macros nil, :cljs.analyzer/constants {:order [:else], :seen #{:else}}, :doc nil}